name: CI with Tests and Coverage

on: [push, pull_request]

jobs:
  linux_build_test:
    name: Build and Test on Linux
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - compiler: gcc
            cpp_compiler: g++
            coverage: true
            build_type: Debug
          - compiler: clang
            cpp_compiler: clang++
            coverage: false

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
        fetch-depth: 0

    - run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake clang lcov

    - run: |
        cmake -S . -B build-${{matrix.compiler}} \
          -D CMAKE_CXX_COMPILER=${{matrix.cpp_compiler}} \
          -D CMAKE_C_COMPILER=${{matrix.compiler}} \
          -D CMAKE_BUILD_TYPE=${{matrix.build_type}} \
          -D BUILD_TESTS=ON \
          -D TESTS_NAME=tests \
          -D ENABLE_COVERAGE=${{matrix.coverage}} \
          -D CMAKE_CXX_FLAGS="${{ matrix.coverage && '--coverage -fprofile-abs-path -O0' || '' }}" \
          -D CMAKE_EXE_LINKER_FLAGS="${{ matrix.coverage && '--coverage' || '' }}"

    - run: |
        cmake --build build-${{matrix.compiler}} -- -j$(nproc)

    - run: |
        cd build-${{matrix.compiler}}
        ./tests --gtest_output=xml:test_results.xml

    - if: matrix.coverage
      run: |
        cd build-${{matrix.compiler}}
        lcov --rc lcov_branch_coverage=0 --ignore-errors mismatch,gcov --capture --directory . -o coverage.info
        lcov --rc lcov_branch_coverage=0 --extract coverage.info "*/banking/*" "*/src/Transaction.h" -o filtered_coverage.info
        genhtml --ignore-errors source filtered_coverage.info --output-directory coverage_report

    - if: matrix.coverage
      uses: coverallsapp/github-action@v2
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        path-to-lcov: build-${{matrix.compiler}}/filtered_coverage.info
        parallel: true
        flag-name: linux-gcc

    - uses: actions/upload-artifact@v4
      with:
        name: test-results-linux-${{matrix.compiler}}
        path: build-${{matrix.compiler}}/test_results.xml

    - if: matrix.coverage
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report-linux-${{matrix.compiler}}
        path: build-${{matrix.compiler}}/coverage_report

  windows_build_test:
    name: Build and Test on Windows
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
        fetch-depth: 0

    - run: |
        cmake -S . -B build_windows `
          -D BUILD_TESTS=ON `
          -D TESTS_NAME=tests `
          -D ENABLE_COVERAGE=false `
          -D gtest_force_shared_crt=ON

    - run: |
        cmake --build build_windows --config Release

    - run: |
        cd build_windows/Release
        .\tests.exe --gtest_output=xml:test_results.xml

    - uses: actions/upload-artifact@v4
      with:
        name: test-results-windows
        path: build_windows/Release/test_results.xml

  coveralls_finalize:
    name: Coveralls Finalize
    needs: 
      - linux_build_test
    runs-on: ubuntu-latest
    steps:
    - uses: coverallsapp/github-action@v2
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        parallel-finished: true
